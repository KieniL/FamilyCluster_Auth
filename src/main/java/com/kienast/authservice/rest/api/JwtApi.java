/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.kienast.authservice.rest.api;

import com.kienast.authservice.rest.api.model.TokenVerificationResponseModel;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
@Api(value = "jwt", description = "the jwt API")
public interface JwtApi {

    @ApiOperation(value = "verify an jwt", nickname = "verifyJwt", notes = "", response = TokenVerificationResponseModel.class, tags={ "jwt", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Schemas", response = TokenVerificationResponseModel.class),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(value = "/jwt",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<TokenVerificationResponseModel> verifyJwt(@ApiParam(value = "" ,required=true) @RequestHeader(value="JWT", required=true) String JWT,@ApiParam(value = "" ,required=true) @RequestHeader(value="X-Request-ID", required=true) String xRequestID,@ApiParam(value = "" ,required=true) @RequestHeader(value="SOURCE_IP", required=true) String SOURCE_IP);

}
