/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.kienast.authservice.rest.api;

import com.kienast.authservice.rest.api.model.AuthenticationModel;
import com.kienast.authservice.rest.api.model.ChangedModel;
import com.kienast.authservice.rest.api.model.LoginModel;
import com.kienast.authservice.rest.api.model.PasswordModel;
import com.kienast.authservice.rest.api.model.ResettedModel;
import com.kienast.authservice.rest.api.model.TokenModel;
import com.kienast.authservice.rest.api.model.TokenVerifiyResponseModel;
import com.kienast.authservice.rest.api.model.UserModel;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
@Api(value = "auth", description = "the auth API")
public interface AuthApi {

    @ApiOperation(value = "Authenticate a customer", nickname = "authenticate", notes = "", response = AuthenticationModel.class, tags={ "auth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Schemas", response = AuthenticationModel.class),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/auth",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AuthenticationModel> authenticate(@ApiParam(value = "" ,required=true) @RequestHeader(value="X-Request-ID", required=true) String xRequestID,@ApiParam(value = "" ,required=true) @RequestHeader(value="SOURCE_IP", required=true) String SOURCE_IP,@ApiParam(value = "" ,required=true )  @Valid @RequestBody LoginModel loginModel);


    @ApiOperation(value = "Change the User Password", nickname = "changePassword", notes = "", response = ChangedModel.class, tags={ "auth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Schemas", response = ChangedModel.class),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/auth/{username}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<ChangedModel> changePassword(@ApiParam(value = "the name of the user",required=true) @PathVariable("username") String username,@ApiParam(value = "" ,required=true) @RequestHeader(value="JWT", required=true) String JWT,@ApiParam(value = "" ,required=true) @RequestHeader(value="X-Request-ID", required=true) String xRequestID,@ApiParam(value = "" ,required=true) @RequestHeader(value="SOURCE_IP", required=true) String SOURCE_IP,@ApiParam(value = "" ,required=true )  @Valid @RequestBody PasswordModel passwordModel);


    @ApiOperation(value = "Get all users", nickname = "getUsers", notes = "", response = UserModel.class, responseContainer = "List", tags={ "auth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Schemas", response = UserModel.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/auth",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<UserModel>> getUsers(@ApiParam(value = "" ,required=true) @RequestHeader(value="JWT", required=true) String JWT,@ApiParam(value = "" ,required=true) @RequestHeader(value="X-Request-ID", required=true) String xRequestID,@ApiParam(value = "" ,required=true) @RequestHeader(value="SOURCE_IP", required=true) String SOURCE_IP);


    @ApiOperation(value = "Register a customer", nickname = "register", notes = "", response = TokenModel.class, tags={ "auth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Schemas", response = TokenModel.class),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/auth",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<TokenModel> register(@ApiParam(value = "" ,required=true) @RequestHeader(value="JWT", required=true) String JWT,@ApiParam(value = "" ,required=true) @RequestHeader(value="X-Request-ID", required=true) String xRequestID,@ApiParam(value = "" ,required=true) @RequestHeader(value="SOURCE_IP", required=true) String SOURCE_IP,@ApiParam(value = "" ,required=true )  @Valid @RequestBody LoginModel loginModel);


    @ApiOperation(value = "Reset the Counter for MFA", nickname = "resetMfa", notes = "", response = ResettedModel.class, tags={ "auth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Schemas", response = ResettedModel.class),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/auth/{username}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ResettedModel> resetMfa(@ApiParam(value = "the name of the user",required=true) @PathVariable("username") String username,@ApiParam(value = "" ,required=true) @RequestHeader(value="JWT", required=true) String JWT,@ApiParam(value = "" ,required=true) @RequestHeader(value="X-Request-ID", required=true) String xRequestID,@ApiParam(value = "" ,required=true) @RequestHeader(value="SOURCE_IP", required=true) String SOURCE_IP,@ApiParam(value = "" ,required=true )  @Valid @RequestBody TokenModel tokenModel);


    @ApiOperation(value = "Verifiy the jwt", nickname = "verifyToken", notes = "", response = TokenVerifiyResponseModel.class, tags={ "auth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Schemas", response = TokenVerifiyResponseModel.class),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/auth",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<TokenVerifiyResponseModel> verifyToken(@ApiParam(value = "" ,required=true) @RequestHeader(value="JWT", required=true) String JWT,@ApiParam(value = "" ,required=true) @RequestHeader(value="X-Request-ID", required=true) String xRequestID,@ApiParam(value = "" ,required=true) @RequestHeader(value="SOURCE_IP", required=true) String SOURCE_IP,@ApiParam(value = "" ,required=true )  @Valid @RequestBody TokenModel tokenModel);

}
